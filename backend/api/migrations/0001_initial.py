# Generated by Django 5.2.1 on 2025-05-19 09:14

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='FuelCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='company_logos/')),
                ('website', models.URLField(blank=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Fuel Companies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FuelType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator('^\\+?1?\\d{9,15}$', 'Enter a valid phone number.')])),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('preferred_fuel_type', models.CharField(blank=True, max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('PRICE_ALERT', 'Price Alert'), ('FAVORITE_UPDATE', 'Favorite Station Update'), ('TRIP_REMINDER', 'Trip Reminder'), ('REVIEW_RESPONSE', 'Review Response'), ('REPORT_STATUS', 'Report Status Update'), ('SYSTEM', 'System Notification')], max_length=50)),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('related_object_id', models.CharField(blank=True, max_length=50)),
                ('related_object_type', models.CharField(blank=True, max_length=50)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PetrolStation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('address', models.CharField(max_length=255)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('country', models.CharField(max_length=100)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('website', models.URLField(blank=True)),
                ('opening_hours', models.JSONField(default=dict, help_text='JSON format of opening hours')),
                ('is_24h', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stations', to='api.fuelcompany')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FuelPrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=3, max_digits=6)),
                ('is_verified', models.BooleanField(default=False)),
                ('reported_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reported_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reported_prices', to=settings.AUTH_USER_MODEL)),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='api.fueltype')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel_prices', to='api.petrolstation')),
            ],
            options={
                'ordering': ['-reported_at'],
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='api.petrolstation')),
            ],
        ),
        migrations.CreateModel(
            name='PriceAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_price', models.DecimalField(decimal_places=3, max_digits=6)),
                ('location_radius', models.DecimalField(decimal_places=2, help_text='Radius in kilometers', max_digits=5)),
                ('location_lat', models.DecimalField(decimal_places=6, max_digits=9)),
                ('location_lng', models.DecimalField(decimal_places=6, max_digits=9)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.fueltype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_alerts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PromotionCampaign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='promotion_banners/')),
                ('terms_conditions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotions', to='api.fuelcompany')),
            ],
            options={
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comment', models.TextField()),
                ('service_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('cleanliness_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('price_rating', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='api.petrolstation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='review_images/')),
                ('caption', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='api.review')),
            ],
        ),
        migrations.CreateModel(
            name='StationAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amenity_type', models.CharField(choices=[('ATM', 'ATM'), ('BATHROOM', 'Bathroom'), ('SHOP', 'Convenience Store'), ('RESTAURANT', 'Restaurant'), ('CAR_WASH', 'Car Wash'), ('TIRE_PRESSURE', 'Tire Pressure'), ('VACUUM', 'Vacuum Cleaner'), ('WATER', 'Water Service'), ('WIFI', 'Wi-Fi'), ('EV_CHARGING', 'EV Charging'), ('AIR_CONDITIONING', 'Air Conditioning'), ('DISABLED_ACCESS', 'Disabled Access'), ('BABY_CHANGE', 'Baby Changing Facilities'), ('COFFEE', 'Coffee Shop')], max_length=50)),
                ('is_operational', models.BooleanField(default=True)),
                ('details', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='amenities', to='api.petrolstation')),
            ],
            options={
                'verbose_name_plural': 'Station Amenities',
            },
        ),
        migrations.CreateModel(
            name='StationPromotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('promotion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stations', to='api.promotioncampaign')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotions', to='api.petrolstation')),
            ],
        ),
        migrations.CreateModel(
            name='StationReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('INCORRECT_PRICE', 'Incorrect Price'), ('INCORRECT_HOURS', 'Incorrect Hours'), ('CLOSED_STATION', 'Permanently Closed'), ('TEMP_CLOSED', 'Temporarily Closed'), ('MISSING_AMENITY', 'Missing Amenity'), ('INCORRECT_AMENITY', 'Incorrect Amenity'), ('OTHER', 'Other Issue')], max_length=50)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending Review'), ('INVESTIGATING', 'Under Investigation'), ('RESOLVED', 'Resolved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='api.petrolstation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='station_reports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StationTraffic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('current_visitors', models.PositiveIntegerField(default=0)),
                ('queue_length', models.PositiveIntegerField(default=0)),
                ('estimated_wait_time', models.PositiveIntegerField(default=0, help_text='Wait time in minutes')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='traffic_records', to='api.petrolstation')),
            ],
            options={
                'ordering': ['-timestamp'],
                'get_latest_by': 'timestamp',
            },
        ),
        migrations.CreateModel(
            name='TripPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_address', models.CharField(max_length=255)),
                ('start_latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('start_longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('destination_address', models.CharField(max_length=255)),
                ('destination_latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('destination_longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('total_distance', models.DecimalField(decimal_places=2, help_text='Distance in kilometers', max_digits=8)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_plans', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RefuelStop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distance_from_start', models.DecimalField(decimal_places=2, help_text='Distance in kilometers from start', max_digits=8)),
                ('estimated_fuel_level', models.DecimalField(decimal_places=2, help_text='Estimated fuel level on arrival (liters)', max_digits=5)),
                ('order', models.PositiveSmallIntegerField(help_text='Order of stop in the trip')),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suggested_stops', to='api.petrolstation')),
                ('trip_plan', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refuel_stops', to='api.tripplan')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='UserSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscription_type', models.CharField(choices=[('FREE', 'Free Tier'), ('BASIC', 'Basic Subscription'), ('PREMIUM', 'Premium Subscription')], default='FREE', max_length=20)),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100)),
                ('auto_renew', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='subscription', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserVisit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('check_out_time', models.DateTimeField(blank=True, null=True)),
                ('visit_duration', models.DurationField(blank=True, null=True)),
                ('station', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_visits', to='api.petrolstation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='station_visits', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('make', models.CharField(max_length=50)),
                ('model', models.CharField(max_length=50)),
                ('year', models.PositiveIntegerField()),
                ('fuel_type', models.CharField(choices=[('PETROL_95', 'Petrol 95'), ('PETROL_98', 'Petrol 98'), ('DIESEL', 'Diesel'), ('ELECTRIC', 'Electric'), ('HYBRID', 'Hybrid'), ('LPG', 'LPG')], max_length=20)),
                ('tank_capacity', models.DecimalField(decimal_places=2, help_text='Capacity in liters', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('avg_consumption', models.DecimalField(decimal_places=2, help_text='Average consumption in liters per 100km', max_digits=4, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('license_plate', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='tripplan',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trip_plans', to='api.vehicle'),
        ),
        migrations.CreateModel(
            name='FuelTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, help_text='Liters/gallons of fuel', max_digits=6)),
                ('price_per_unit', models.DecimalField(decimal_places=3, max_digits=6)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('odometer_reading', models.PositiveIntegerField(blank=True, null=True)),
                ('transaction_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel_transactions', to=settings.AUTH_USER_MODEL)),
                ('fuel_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.fueltype')),
                ('station', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='api.petrolstation')),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fuel_transactions', to='api.vehicle')),
            ],
            options={
                'ordering': ['-transaction_date'],
            },
        ),
        migrations.AddIndex(
            model_name='petrolstation',
            index=models.Index(fields=['latitude', 'longitude'], name='api_petrols_latitud_71ee28_idx'),
        ),
        migrations.AddIndex(
            model_name='petrolstation',
            index=models.Index(fields=['city', 'state'], name='api_petrols_city_a5ed47_idx'),
        ),
        migrations.AddIndex(
            model_name='fuelprice',
            index=models.Index(fields=['station', 'fuel_type', 'reported_at'], name='api_fuelpri_station_ced801_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favorite',
            unique_together={('user', 'station')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('user', 'station')},
        ),
        migrations.AlterUniqueTogether(
            name='stationamenity',
            unique_together={('station', 'amenity_type')},
        ),
    ]
